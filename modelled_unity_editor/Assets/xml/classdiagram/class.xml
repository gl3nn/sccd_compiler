<?xml version="1.0" encoding="UTF-8" ?>
<class name="Class">
    <relationships>
        <association class="Canvas" name="canvas" max="1"/>
    </relationships>
    <attribute type="SGUICanvasElement" name="widget" access="private"/>
    <attribute type="XElement" name="class_xml" access="private"/>
    <attribute type="int" name="resize_id" access="private" init-value="-1"/>
    <constructor>
        <parameter type="SGUICanvasElement" name="widget"/>
        <parameter type="XElement" name="xml"/>
        <parameter type="bool" name="is_loading"/>
        <body>
            <![CDATA[
            this.widget = widget;
            if (is_loading)
            {
                this.class_xml = xml;
                // set position
                this.widget.setPosition(
                    float.Parse(this.class_xml.Attribute("x").Value),
                    float.Parse(this.class_xml.Attribute("y").Value),
                    float.Parse(this.class_xml.Attribute("w").Value),
                    float.Parse(this.class_xml.Attribute("h").Value)
                );
                
                SCCDUtility.assureAttribute(this.class_xml, "name", "NoNameClass");
            }
            else
            {
                //xml is parent, create XElement for class
                this.class_xml = new XElement("class", 
                    new XAttribute("name", "NewClass"),
                    new XAttribute("x", this.widget.position.x.ToString()),
                    new XAttribute("y", this.widget.position.y.ToString()),
                    new XAttribute("w", this.widget.position.width.ToString()),
                    new XAttribute("h", this.widget.position.height.ToString())
                );
                xml.Add(this.class_xml);
            }
            this.widget.label = this.class_xml.Attribute("name").Value;
            
            ]]>
        </body>
    </constructor>
    <method type="void" name="updateXMLPosition">
        <body>
            this.class_xml.Attribute("x").Value = this.widget.position.x.ToString();
            this.class_xml.Attribute("y").Value = this.widget.position.y.ToString();
        </body>
    </method>
    <method type="void" name="updateXMLSize">
        <body>
            this.class_xml.Attribute("w").Value = this.widget.position.width.ToString();
            this.class_xml.Attribute("h").Value = this.widget.position.height.ToString();
        </body>
    </method>
    <scxml initial="main">            
        <parallel id="main">
        
            <!-- STATE INDEPENDENT ACTIONS -->
            
            <state id="state_independent_actions" initial="listening">
                <state id="listening">
                
                    <!-- Set state creation type (toolbar event) -->

                    <transition event="adjust_size" target=".">
                        <script>
                            this.widget.adjustSize();
                        </script>
                    </transition>
 
                </state>
            </state>
            
            <!-- STATE DEPENDENT ACTIONS -->
            
            <state id="state_dependent_actions" initial="setup">

                <state id="setup">
                    <transition target="../default/selected/default"/>
                </state>

                <state id="default" initial="not_selected">

                    <!-- Signal the start of the creation of an edge -->

                    <transition event="right-mouse-down" port="input" cond="tag == this.widget.tag" target="../edge_creation">
                        <parameter name="tag" type="int"/>
                        <parameter type="Vector2" name="position"/>
                        <raise event="create_edge" target='"canvas"'>
                            <parameter expr='this.widget'/>
                            <parameter expr="position"/>
                        </raise>
                    </transition>
                    
                    <!-- Some other class initiated edge creation, nonetheless enter the EDGE CREATION state -->
                    
                    <transition event="enter_edge_creation" target="../edge_creation"/>
                    
                    <!-- NOT SELECTED STATE -->
                    
                    <state id="not_selected">
                        <transition event="left-mouse-down" port="input"  cond="tag == this.widget.tag" target="../selected">
                            <parameter name="tag" type="int"/>
                            <raise event="unselect" target='"canvas"'>
                                <parameter expr='this.widget.tag'/>
                            </raise>
                            <script>
                                this.widget.pushToFront();
                            </script>
                        </transition>
                        <transition event="middle-mouse-down" port="input"  cond="tag == this.widget.tag" target=".">
                            <parameter name="tag" type="int"/>
                            <raise event="unselect" target='"canvas"'>
                                <parameter expr='this.widget.tag'/>
                            </raise>
                        </transition>
                        
                    </state>
                    
                    <!-- SELECTED STATE -->
                    
                    <state id="selected" initial="dragging">
                        <onentry>
                            <script>
                                this.widget.setColor(Color.Lerp(GUI.backgroundColor, Color.green, 0.5f));
                                this.widget.enableResize(true);
                            </script>
                            <raise event="set_class_properties" target='"canvas/window/properties_panel"'>
                                <parameter expr='this.class_xml' />
                                <parameter expr='this.widget' />
                            </raise>
                        </onentry>
                        <onexit>
                            <script>
                                this.widget.resetColor();
                                this.widget.enableResize(false);
                            </script>
                            <raise event="reset_panel" target='"canvas/window/properties_panel"'/>
                        </onexit>
                        <transition event="unselect" target="../not_selected" cond="this.widget.tag != except_tag">
                            <parameter type="int" name="except_tag"/>
                        </transition>
                        
                        <transition target="/final" port="input" event="key-down" cond="key_code == KeyCode.Delete">
                            <parameter type="KeyCode" name="key_code"/>
                            <raise event="remove_class" target='"canvas"'>
                                <parameter expr="this.widget"/>
                            </raise>
                        </transition>
                        
                        <state id="default">
                            <transition target="../dragging" port="input" event="left-mouse-down" cond="tag == this.widget.tag">
                                <parameter type="int" name="tag"/>
                                <parameter type="Vector2" name="position"/>
                                <script>
                                    this.resize_id = this.widget.getContainingResizeRect(position);
                                </script>
                            </transition>
                        </state>
                        
                        <state id="dragging">
                            <transition target="." port="input" event="left-mouse-drag" cond="tag == this.widget.tag || tag == this.widget.canvas.tag">
                                <parameter type="int" name="tag"/>
                                <parameter type="Vector2" name="position"/>
                                <parameter type="Vector2" name="delta"/>
                                <script>
                                    if (this.resize_id >= 0)
                                    {
                                        this.widget.resize(this.resize_id, delta);
                                        this.updateXMLSize();
                                    }
                                    else
                                    {
                                        this.widget.move(delta);
                                    }
                                    this.updateXMLPosition();
                                </script>
                            </transition>
                            <transition target="../default" port="input" event="left-mouse-up">
                                <script>
                                    this.resize_id = -1;
                                </script>
                            </transition>
                        </state>
                    </state>
                </state>
                
                <!-- EDGE CREATION MODE. IS ENTERED WHENEVER AN EDGE IS BEING CREATED. -->
                
                <state id="edge_creation">
                    
                    <!-- Signal that this is a valid end connection for the edge being created. -->
                    
                    <transition event="right-mouse-up" port="input" cond="tag == this.widget.tag" target="../default">
                        <parameter name="tag" type="int"/>
                        <parameter name="position" type="Vector2"/>
                        <raise event="edge_end" target='"canvas"'>
                            <parameter expr="this.widget"/>
                            <parameter expr="position"/>
                        </raise>
                    </transition>
                    
                    <!-- Signal that a possible end connection is targeted. -->
                    
                    <transition event="right-mouse-drag" port="input" cond="tag == this.widget.tag" target=".">
                        <parameter name="tag" type="int"/>
                        <parameter name="position" type="Vector2"/>
                        <raise event="over_edge_end" target='"canvas"'>
                            <parameter expr="this.widget"/>
                            <parameter expr="position"/>
                        </raise>
                    </transition>
                    
                    <!-- Edge creation terminated. Return to default. -->
                    
                    <transition event="edge_creation_stopped" target="../default"/>

                </state>
            </state>
        </parallel>
        
        <state id="final"/>
    </scxml>
</class>
