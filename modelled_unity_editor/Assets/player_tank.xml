<?xml version="1.0" ?>
<diagram author="Glenn De Jonghe" name="PlayerTank">
    <description>
        Handling the player tank.
    </description>
    <top>
        using UnityEngine;
        using Event = sccdlib.Event;
        #pragma warning disable 0219 // variable assigned but not used.
        #pragma warning disable 0414 // private field assigned but not used.
    </top>
    <inport name="engine" />
    <inport name="input" />
    <outport name="gui" />
    <class name="Main" default="true">
        <attribute name="tank" type="GameObject"/>
        <constructor>
            <parameter type="GameObject" name="tank"/>
            <body>
                this.tank = tank;
           </body>
        </constructor>
        <relationships>
            <association class="Cannon" name="cannon" min="1" max="1"/>
            <association class="Body" name="body" min="1" max="1"/>
        </relationships>
        <scxml initial="cannon_creation">
            <state id="cannon_creation">
                <onentry>
                    <raise event="create_instance" scope="cd">
                        <parameter expr='"cannon"'/>
                        <parameter expr='"Cannon"'/>
                        <parameter expr="this.tank"/>
                    </raise>
                </onentry>
                <transition event="instance_created" target="../body_creation"/>
            </state>
            <state id="body_creation">
                <onentry>
                     <raise event="create_instance" scope="cd">
                        <parameter expr='"body"'/>
                        <parameter expr='"Body"'/>
                        <parameter expr="this.tank"/>
                    </raise>
                </onentry>
                <transition event="instance_created" target="../final">
                    <raise event="start_instance" scope="cd">
                        <parameter expr='"cannon"'/>
                    </raise> 
                    <raise event="start_instance" scope="cd">
                        <parameter expr='"body"'/>
                    </raise>
                </transition>
            </state>
            <state id="final"/>
        </scxml>
    </class>
    
    <class name="Cannon">
        <attribute name="tank" type="GameObject"/>
        <attribute name="turret" type="Transform"/>
        <attribute name="bullet_spawn" type="Transform"/>
        <attribute name="bullet_prefab" type="Transform"/>
        <attribute name="reload_time" type="float" init-value="1.0f"/>
        <attribute name="turret_rotation_speed" type="float" init-value="3.0f"/>
        <constructor>
            <parameter type="GameObject" name="tank"/>
            <body>
                this.tank = tank;
                this.turret = tank.transform.FindChild("turret");
                this.bullet_spawn = this.turret.FindChild("bullet_spawn");
                this.bullet_prefab = Resources.Load("bullet_prefab") as Transform;
           </body>
        </constructor>
        <scxml>
            <parallel id="container">
                <state id="rotating" initial="none">
                    <state id="none">
                        <transition port="input" event="arrow-left-pressed" target="../left"/>
                        <transition port="input" event="arrow-right-pressed" target="../right"/>
                    </state>
                    <state id="left">
                        <transition port="input" event="arrow-left-released" target="../none">
                            <script>
                                Debug.Log("arrow-left-released");
                            </script>
                        </transition>
                        <transition port="input" event="arrow-right-pressed" target="../both"/>
                        <transition port="engine" event="fixed-update" target=".">
                            <script>
                                this.turret.RotateAround(this.tank.transform.position, Vector3.up, -this.turret_rotation_speed);
                            </script>
                        </transition>
                    </state>
                    <state id="both">
                        <transition port="input" event="arrow-left-released" target="../right"/>
                        <transition port="input" event="arrow-right-released" target="../left"/>
                    </state>
                    <state id="right">
                        <transition port="input" event="arrow-left-pressed" target="../both"/>
                        <transition port="input" event="arrow-right-released" target="../none"/>
                        <transition port="engine" event="fixed-update" target=".">
                            <script>
                                this.turret.transform.RotateAround(this.tank.transform.position, Vector3.up, this.turret_rotation_speed);
                            </script>
                        </transition>
                    </state>
                </state>
                <state id="shoot" initial="hold">
                    <state id="hold">
                        <transition port="input" event="arrow-up-pressed" target="../shoot">
                            <raise event="shoot"/>
                        </transition>
                    </state>
                    <state id="shoot">
                        <transition port="input" event="arrow-up-released" target="../hold"/>
                        <transition event="loaded" target=".">
                            <raise event="shoot"/>
                        </transition>
                    </state>
                </state>
                <state id="ammo" initial="loaded">
                    <state id="loaded">
                        <transition event="shoot" target="../unloaded">
                            <script>
                                GameObject.Instantiate(this.bullet_prefab, this.bullet_spawn.position, this.turret.rotation);
                            </script>
                            <raise port="gui" event="reloading"/>
                        </transition>
                    </state>
                    <state id="unloaded">
                        <transition after="this.reload_time" target="../loaded">
                            <raise event="loaded"/>
                            <raise port="gui" event="loaded"/>
                        </transition>
                    </state>
                </state>
            </parallel>
        </scxml>
    </class>
    
    <class name="Body">
        <attribute name="tank" type="GameObject"/>
        <attribute name="body_rotation_speed" type="float" init-value="3.0f"/>
        <attribute name="body_speed" type="float" init-value="0.05f"/>
        <constructor name="Body">
            <parameter type="GameObject" name="tank"></parameter>
            <body>
                this.tank = tank;
           </body>
        </constructor>
        <scxml>
            <parallel id="container">
                <state id="horizontal" initial="none">
                    <state id="none">
                        <transition port="input" event="left-pressed" target="../left"/>
                        <transition port="input" event="right-pressed" target="../right"/>
                    </state>
                    <state id="left">
                        <transition port="input" event="left-released" target="../none"/>
                        <transition port="input" event="right-pressed" target="../both"/>
                        <transition port="engine" event="fixed-update" target=".">
                            <script>
                                this.tank.transform.Rotate(0, -this.body_rotation_speed, 0);
                            </script>
                        </transition>
                    </state>
                    <state id="both">
                        <transition port="input" event="left-released" target="../right"/>
                        <transition port="input" event="right-released" target="../left"/>
                    </state>
                    <state id="right">
                        <transition port="input" event="left-pressed" target="../both"/>
                        <transition port="input" event="right-released" target="../none"/>
                        <transition port="engine" event="fixed-update" target=".">
                            <script>
                                this.tank.transform.Rotate(0, this.body_rotation_speed, 0);
                            </script>
                        </transition>
                    </state>
                </state>           
                <state id="vertical" initial="none">
                    <state id="none">
                        <transition port="input" event="down-pressed" target="../down"/>
                        <transition port="input" event="up-pressed" target="../up"/>
                    </state>
                    <state id="down">
                        <transition port="input" event="down-released" target="../none"/>
                        <transition port="input" event="up-pressed" target="../both"/>
                        <transition port="engine" event="fixed-update" target=".">
                            <script>
                                this.tank.transform.Translate(Vector3.back * this.body_speed);
                            </script>
                        </transition>
                    </state>
                    <state id="both">
                        <transition port="input" event="down-released" target="../up"/>
                        <transition port="input" event="up-released" target="../down"/>
                    </state>
                    <state id="up">
                        <transition port="input" event="down-pressed" target="../both"/>
                        <transition port="input" event="up-released" target="../none"/>
                        <transition port="engine" event="fixed-update" target=".">
                            <script>
                                this.tank.transform.Translate(Vector3.forward * this.body_speed);
                            </script>
                        </transition>
                    </state>
                </state>             
            </parallel>
        </scxml>
    </class>
</diagram>
