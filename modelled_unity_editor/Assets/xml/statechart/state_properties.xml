<?xml version="1.0" encoding="UTF-8" ?>
<class name="StateProperties">
    <relationships>
        <association class="PropertiesPanel" name="panel" max="1"/>
        <association class="Action" name="action" max="1"/>
    </relationships>
    <attribute type="SGUIVerticalGroup" name="panel_widget"/>
    <attribute type="XElement" name='state_xml'/>
    <attribute type="SGUICanvasElement" name='state_widget'/>
    
    <attribute type="List&lt;XElement&gt;" name="elements_to_load"/>
    
    <attribute type="SGUITextField" name='name_field'/>
    <attribute type="SGUICheckBox" name='is_default_checkbox'/>
    <attribute type="SGUICheckBox" name='is_history_deep_checkbox'/>
    <attribute type="SGUIButton" name='enter_action_button'/>
    <attribute type="SGUIButton" name='exit_action_button'/>
    <constructor>
        <parameter type="SGUIVerticalGroup" name='panel_widget'/>
        <parameter type="XElement" name='state_xml'/>
        <parameter type="SGUICanvasElement" name='state_widget'/>
        <body>
            <![CDATA[
            this.panel_widget = panel_widget;
            this.state_xml = state_xml;
            this.state_widget = state_widget;
            
            //id property setup
            SCCDUtility.assureAttribute(this.state_xml, "id");
            this.name_field = new SGUITextField("Name", this.state_xml.Attribute("id").Value);
            this.panel_widget.addChild(this.name_field);
            
            //Is this a default state?
            if (SCCDUtility.hasName(this.state_xml.Parent, "state") || SCCDUtility.hasName(this.state_xml.Parent, "scxml"))
            {           
                this.is_default_checkbox = new SGUICheckBox("Is default state", state_xml.Parent.Attribute("initial").Value == this.state_xml.Attribute("id").Value);
                this.panel_widget.addChild(this.is_default_checkbox);
            }
            
            //Is this a history state? yes, what type?
            if (SCCDUtility.hasName(this.state_xml, "history"))
            {           
                this.is_history_deep_checkbox = new SGUICheckBox("Deep history?", state_xml.Attribute("type").Value == "deep");
                this.panel_widget.addChild(this.is_history_deep_checkbox);
            }
            
            //onentry setup
            SGUIHorizontalGroup onentry_group = new SGUIHorizontalGroup();
            onentry_group.addChild(new SGUILabel("Enter action:"));
            onentry_group.addChild(new SGUISpace());
            this.enter_action_button = new SGUIButton(this.state_xml.Element("onentry") == null ? "Add" : "Edit");
            onentry_group.addChild(this.enter_action_button);
            this.panel_widget.addChild(onentry_group);
            
            //onexit setup
            SGUIHorizontalGroup onexit_group = new SGUIHorizontalGroup();
            onexit_group.addChild(new SGUILabel("Exit action:"));
            onexit_group.addChild(new SGUISpace());
            this.exit_action_button = new SGUIButton(this.state_xml.Element("onexit") == null ? "Add" : "Edit");
            onexit_group.addChild(this.exit_action_button);
            this.panel_widget.addChild(onexit_group);
            ]]>
        </body>
    </constructor>
    <destructor>
        <body>
            this.panel_widget.clearChildren();
        </body>
    </destructor>
    <scxml initial="listening">
        <state id="listening">
                
            <!-- Name field changed, edit @name -->
            <transition event="changed" port="input" cond='this.name_field.tag == tag' target=".">
                <parameter name="tag" type="int"/>
                <script>
                    this.state_xml.Attribute("id").Value = this.name_field.text;
                    this.state_widget.label = this.name_field.text;
                </script>
            </transition>
            
            <!-- is_default_checkbox changed, edit parent's @initial -->
            <transition event="changed" port="input" cond='this.is_default_checkbox.tag == tag' target=".">
                <parameter name="tag" type="int"/>
                <script>
                    this.state_widget.setLabelStyle("emphtitle");
                    if (this.is_default_checkbox.is_checked)
                    {
                        this.state_xml.Parent.Attribute("initial").Value = this.name_field.text;
                        this.state_widget.setLabelStyle("emphtitle");
                    }
                    else
                    {
                        this.state_xml.Parent.Attribute("initial").Value = "";
                        this.state_widget.setLabelStyle("title");
                    }
                </script>
            </transition>
            
                <!-- is_history_deep_checkbox changed, edit @type -->
            <transition event="changed" port="input" cond='this.is_history_deep_checkbox != null &amp;&amp; this.is_history_deep_checkbox.tag == tag' target=".">
                <parameter name="tag" type="int"/>
                <script>
                    if (this.is_history_deep_checkbox.is_checked)
                    {
                        this.state_xml.Attribute("type").Value = "deep";
                        this.state_widget.setStyle("deephistorystate");
                    }
                    else
                    {
                        this.state_xml.Attribute("type").Value = "shallow";
                        this.state_widget.setStyle("shallowhistorystate");
                    }
                </script>
            </transition>
            
            <!-- The add/edit button of the enter or exit action pressed -->
            
            <transition event="button_pressed" port="input" cond='tag == this.enter_action_button.tag || tag == this.exit_action_button.tag' target="../default_activation">
                <parameter name="tag" type="int"/>
                    <script>
                        XElement action_xml;
                        if (tag == this.enter_action_button.tag)
                        {
                            action_xml = this.state_xml.Element("onentry");
                            if (action_xml == null)
                            {
                                 action_xml = new XElement("onentry");
                                 this.state_xml.Add(action_xml);
                                 this.enter_action_button.setLabel("Edit");
                            }
                        }
                        else
                        {
                            action_xml = this.state_xml.Element("onexit");
                            if (action_xml == null)
                            {
                                 action_xml = new XElement("onexit");
                                 this.state_xml.Add(action_xml);
                                 this.exit_action_button.setLabel("Edit");
                            }
                        }
                    </script>
                <raise scope="cd" event="create_instance">
                    <parameter expr='"action"' />
                    <parameter expr='"Action"'/>
                    <parameter expr='action_xml' />
                </raise>
            </transition>
            
            <transition event="action_closed" target=".">
                <raise scope="cd" event="delete_instance">
                    <parameter expr='"action"' />
                </raise>         
            </transition>

        </state>
        
        <state id="default_activation">
            <transition event="instance_created" target="../listening">
                <parameter name="id" type="int"/>
                <parameter name="association_name" type="String"/>
                <script>
                    String association_path = String.Format("{0}[{1}]", association_name, id);
                </script>
                <raise scope="cd" event="associate_instance">
                    <parameter expr='"."' />
                    <parameter expr='association_path + "/parent"'/>
                </raise>
                <raise scope="cd" event="start_instance">
                    <parameter expr='association_path' />
                </raise>
            </transition>
        </state>
    </scxml>
</class>
