<?xml version="1.0" encoding="UTF-8" ?>
<class name="Canvas">
    <relationships>
        <association class="Window" name="window" max="1"/>
        <association class="State" name="children"/>
        <association class="State" name="all_states"/>
        <association class="Transition" name="all_transitions"/>
    </relationships>
    <attribute type="SGUICanvas" name="canvas_widget"/>
    <attribute type="XElement" name="statechart_xml"/>
    
    <attribute type="List&lt;XElement&gt;" name="states_to_load"/>
    <attribute type="List&lt;XElement&gt;" name="transitions_to_load"/>
    <attribute type="Dictionary&lt;XElement, SGUICanvasElement&gt;" name="state_xml_to_widget"/>
    
    <attribute type="Dictionary&lt;int, int&gt;" name="children_map"/>
    <attribute type="Dictionary&lt;int, int&gt;" name="all_states_map"/>
    <attribute type="Dictionary&lt;int, int&gt;" name="all_transitions_map"/>
    <attribute type="SGUICanvasElement" name="current_element"/>
    <attribute type="XElement" name="current_xml_element"/>
    <attribute type="SGUICanvasEdge" name="current_transition"/>
    <attribute type="string" name="creation_type" init-value='""'/>
    <constructor>
        <parameter type="SGUIVerticalGroup" name="canvas_container"/>
        <parameter type="XElement" name="statechart_xml"/>
        <body>
            <![CDATA[
            this.canvas_widget = new SGUICanvas();
            canvas_container.addChild(this.canvas_widget);
            this.children_map = new Dictionary<int,int>();
            this.all_states_map = new Dictionary<int,int>();
            this.all_transitions_map = new Dictionary<int,int>();
            this.statechart_xml = statechart_xml;
            
            //load states and transitions from xml
            this.states_to_load = new List<XElement>();
            this.transitions_to_load = new List<XElement>();
            this.state_xml_to_widget = new Dictionary<XElement, SGUICanvasElement>();
            
            List<XElement> current_level_states = this.statechart_xml.Elements("state").ToList();
            current_level_states.AddRange(this.statechart_xml.Elements("parallel"));
            current_level_states.AddRange(this.statechart_xml.Elements("history"));
            while(current_level_states.Count > 0)
            {
                List<XElement> next_level_states = new List<XElement>(){};
                for(int i=0; i<current_level_states.Count; i++)
                {
                    XElement current_element = current_level_states[i];
                    states_to_load.Add(current_element);
                    this.state_xml_to_widget[current_element] = new SGUICanvasElement();
                    next_level_states.AddRange(current_element.Elements("state"));
                    next_level_states.AddRange(current_element.Elements("parallel"));
                    next_level_states.AddRange(current_element.Elements("history"));
                    
                    //transitions
                    this.transitions_to_load.AddRange(current_element.Elements("transition"));
                }
                current_level_states = next_level_states;
            }
            this.states_to_load.Reverse();
            this.transitions_to_load.Reverse();
            ]]>
        </body>
    </constructor>
    
    <scxml initial="main">
        
        <parallel id="main">
        
        	<!-- STATE INDEPENDENT ACTIONS -->
            	
            <state id="state_independent_actions" initial="listening">
                <state id="listening">
                
                    <!-- Set state creation type (toolbar event) -->

                    <transition event="state_type_toolbar_changed" target=".">
                        <parameter name="state_type" type="string"/>
                        <script>
                            this.creation_type = state_type;
                        </script>
                    </transition>
                    
                    <!-- Unselect -->
                    
                    <transition event="unselect" target=".">
                        <parameter name="except_tag" type="int"/>
                        <raise event="unselect" target='"./all_states"'>
                            <parameter expr='except_tag'/>
                        </raise>
                        <raise event="unselect" target='"./all_transitions"'>
                            <parameter expr='except_tag'/>
                        </raise>
                    </transition>
                    
                                            
                    <!-- Connect immediate child state to canvas -->
                    
                    <transition event="new_child" target=".">
                        <parameter type="int" name="id"/>
                        <parameter type="SGUICanvasElement" name="child"/>
                        <parameter type="XElement" name="child_xml"/>
                        <script>
                            this.canvas_widget.addElement(child);
                            this.children_map[child.tag] = id;
                            /*if (child_xml != null)
                            {*/
                                child_xml.Remove();
                                this.statechart_xml.Add(child_xml);
                            //}                            
                        </script>
                    </transition>
                    
                    <!-- Disconnection immediate child state from canvas -->
                    
                    <transition event="disconnect_child" target=".">
                        <parameter name="child" type="SGUICanvasElement"/>
                        <raise scope="cd" event="unassociate_instance">
                            <parameter expr='String.Format("children[{0}]", this.children_map[child.tag])' />                          
                        </raise>
                        <script>
                            this.children_map.Remove(child.tag);
                            this.canvas_widget.removeElement(child);
                        </script>
                    </transition>
                    
                    <!-- Remove class from canvas -->
                        
                    <transition event="remove_state" target=".">
                        <parameter name="remove_state" type="SGUICanvasElement"/>
                        <raise scope="cd" event="delete_instance">
                            <parameter expr='String.Format("all_states[{0}]", this.all_states_map[remove_state.tag])' />                          
                        </raise>
                        <script>
                            this.all_states_map.Remove(remove_state.tag);
                            foreach (SGUICanvasEdge edge in this.canvas_widget.edges)
                            {
                                if (edge.start.canvas_element == remove_state || edge.end.canvas_element == remove_state)
                                {
                                    //remove edge by sending remove_transition event to canvas                    
                        </script>
                                    <raise scope="local" event="remove_transition">
                                        <parameter expr='edge' />                          
                                    </raise>
                        <script>
                                }
                            }
                        </script>
                    </transition>
                    
                    <!-- Remove transition from canvas -->
                        
                    <transition event="remove_transition" target=".">
                        <parameter name="edge_widget" type="SGUICanvasEdge"/>
                        <raise scope="cd" event="delete_instance">
                            <parameter expr='String.Format("all_transitions[{0}]", this.all_transitions_map[edge_widget.tag])' />                          
                        </raise>
                        <script>
                            this.all_transitions_map.Remove(edge_widget.tag);                         
                        </script>
                    </transition>
                </state>
            </state> <!-- end of state independent actions -->
                
            <!-- STATE DEPENDENT ACTIONS -->
                
            <state id="state_dependent_actions" initial="saving_history">
                <state id="saving_history" initial="loading">
                
                    <state id="loading" initial="states_loading">
                    
                        <state id="states_loading">
                            <transition target="../../../loaded_state_activation" cond="this.states_to_load.Count > 0">
                                <script>
                                    <![CDATA[
                                    this.current_xml_element = this.states_to_load[this.states_to_load.Count - 1];
                                    this.current_element = this.state_xml_to_widget[current_xml_element];
                                    ]]>
                                </script>
                                <raise scope="cd" event="create_instance">
                                    <parameter expr='"all_states"' />
                                    <parameter expr='"State"'/>
                                    <parameter expr='this.current_element' />
                                    <parameter expr='this.current_xml_element' />
                                    <parameter expr='true' />
                                </raise>
                            </transition>
                            <transition target="../transitions_loading" cond="this.states_to_load.Count == 0">
                                <script>
                                    this.states_to_load = null;
                                </script>
                            </transition>
                        </state>
                        
                        <state id="transitions_loading">
                            <transition target="../loaded_transition_activation" cond="this.transitions_to_load.Count > 0">
                                <script>
                                    <![CDATA[
                                    XElement transition_xml = this.transitions_to_load[this.transitions_to_load.Count - 1];
                                    this.transitions_to_load.RemoveAt(this.transitions_to_load.Count - 1);
                                    SCCDUtility.assureAttribute(transition_xml, "target");
                                    SCCDUtility.assureAttribute(transition_xml, "start-id", "0");
                                    SCCDUtility.assureAttribute(transition_xml, "end-id", "0");
                                    XElement start_xml = transition_xml.Parent;
                                    XElement end_xml = SCCDUtility.getTransitionTarget(
                                        this.statechart_xml, start_xml, transition_xml.Attribute("target").Value);
                                        
                                    this.current_transition = new SGUICanvasEdge(
                                        this.state_xml_to_widget[start_xml],
                                        int.Parse(transition_xml.Attribute("start-id").Value),
                                        this.state_xml_to_widget[end_xml],
                                        int.Parse(transition_xml.Attribute("end-id").Value)
                                    );
                                    ]]>
                                </script>
                                <raise scope="cd" event="create_instance">
                                    <parameter expr='"all_transitions"' />
                                    <parameter expr='"Transition"'/>
                                    <parameter expr='this.current_transition' />
                                    <parameter expr='transition_xml' />
                                    <parameter expr='true' />
                                </raise>
                            </transition>
                            <transition target="../../default" cond="this.transitions_to_load.Count == 0">
                                <script>
                                    this.transitions_to_load = null;
                                    this.state_xml_to_widget = null;
                                </script>
                            </transition>
                        </state>
                        
                        <state id="loaded_transition_activation">
                            <transition event="instance_created" target="../transitions_loading">
                                <parameter name="id" type="int"/>
                                <parameter name="association_name" type="String"/>
                                <script>
                                    String association_path = String.Format("{0}[{1}]", association_name, id);
                                    this.all_transitions_map[this.current_transition.tag] = id;
                                </script>
                                <raise scope="cd" event="associate_instance">
                                    <parameter expr='"."'/>
                                    <parameter expr='association_path + "/canvas"' />
                                </raise>
                                <raise scope="cd" event="start_instance">
                                    <parameter expr='association_path' />
                                </raise>
                            </transition>
                        </state>
                    </state> <!-- end of loading state -->                            
                    <!-- DEFAULT STATE-->
                    
                    <state id="default">
     
                        <!-- Left mouse down : unselect -->

                        <transition event="left-mouse-down" port="input"  cond="tag == this.canvas_widget.tag" target=".">
                            <parameter name="tag" type="int"/>
                            <raise event="unselect">
                                <parameter expr='tag'/>
                            </raise>
                        </transition>

                        <!-- Right mouse down : unselect + create state -->

                        <transition event="right-mouse-down" port="input" cond="tag == this.canvas_widget.tag" target="../../state_activation">
                            <parameter name="tag" type="int"/>
                            <parameter type="Vector2" name="position"/>
                            <raise event="unselect">
                                <parameter expr='tag'/>
                            </raise>
                            <script>
                                this.current_element = new SGUICanvasElement(canvas_widget, position);
                                this.current_xml_element = new XElement(this.creation_type);
                                this.statechart_xml.Add(this.current_xml_element);
                            </script>
                            <raise scope="cd" event="create_instance">
                                <parameter expr='"./all_states"' />
                                <parameter expr='"State"'/>
                                <parameter expr='this.current_element' />
                                <parameter expr='this.current_xml_element' />
                                <parameter expr='false' />
                            </raise>
                        </transition>

                        <!-- Middle mouse down : unselect -->

                        <transition event="middle-mouse-down" port="input"  cond="tag == this.canvas_widget.tag" target=".">
                            <parameter name="tag" type="int"/>
                            <raise event="unselect">
                                <parameter expr='tag'/>
                            </raise>
                        </transition>
                        
                        <!-- Initiate state hierarchy connection -->
                        
                        <transition event="connect_child_to_parent" target="../../hierarchy_connection">
                            <parameter name="child" type="SGUICanvasElement"/>
                            <parameter name="parent" type="SGUICanvasElement"/>
                            <parameter name="child_xml" type="XElement"/>
                            <script>
                                this.current_element = child;
                                this.current_xml_element = child_xml;
                                String parent_path = ".";
                                if (parent != null)
                                {
                                    parent_path = String.Format("all_states[{0}]", this.all_states_map[parent.tag]);
                                }
                                String child_path = String.Format("all_states[{0}]", this.all_states_map[child.tag]);
                            </script>
                            <raise scope="cd" event="associate_instance">
                                <parameter expr='parent_path' />
                                <parameter expr='child_path + "/parent"'/>
                            </raise>
                            <raise scope="cd" event="associate_instance">
                                <parameter expr='child_path' />
                                <parameter expr='parent_path + "/children"'/>
                            </raise>
                        </transition>

                        <!-- State initiated transition creation -->
                        
                        <transition event="create_transition" target="../transition_creation">
                            <parameter type="SGUICanvasElement" name="source_state"/>
                            <parameter type="Vector2" name="position"/>
                            <parameter type="XElement" name="state_xml"/>
                            <raise event="enter_transition_creation" target='"all_states"'/>
                            <script>
                                this.current_transition = new SGUICanvasEdge(source_state, position);  
                            </script>
                            <raise scope="cd" event="create_instance">
                                <parameter expr='"./all_transitions"' />
                                <parameter expr='"Transition"'/>
                                <parameter expr='this.current_transition' />
                                <parameter expr='state_xml'/>
                                <parameter expr='false'/>
                            </raise>
                        </transition>
                    </state> <!-- end of default -->                 
                
                    <!-- TRANSITION CREATION STATE -->
                    
                    <state id="transition_creation" initial="activation">
                        <state id="activation">
                            <transition event="instance_created" target="../creating">
                                <parameter name="id" type="int"/>
                                <parameter name="association_name" type="String"/>
                                <script>
                                    String association_path = String.Format("{0}[{1}]", association_name, id);
                                    this.all_transitions_map[this.current_transition.tag] = id;
                                </script>
                                <raise scope="cd" event="associate_instance">
                                    <parameter expr='"."'/>
                                    <parameter expr='association_path + "/canvas"' />
                                </raise>
                                <raise scope="cd" event="start_instance">
                                    <parameter expr='association_path' />
                                </raise>
                            </transition>
                        </state>
                        <state id="creating">

                            <!-- Mouse released on canvas, so transition gets cancelled.--> 

                            <transition event="transition_cancelled" target="../../default">
                                <script>
                                    String association_path = String.Format("all_transitions[{0}]", this.all_transitions_map[this.current_transition.tag]);
                                    this.all_transitions_map.Remove(this.current_transition.tag);
                                </script>
                                <raise scope="cd" event="delete_instance">
                                    <parameter expr="association_path"/>
                                </raise>
                                <script>
                                    this.current_transition = null;
                                </script>
                            </transition>


                            <!-- Event received from a state, that the edge end got released over it. -->
                            <transition event="transition_end" target="../../default">
                                <parameter type="XElement" name="end_state_xml"/>
                                <script>
                                    String association_path = String.Format("all_transitions[{0}]", this.all_transitions_map[this.current_transition.tag]);
                                    this.current_transition = null;
                                </script>
                                <raise event="transition_finished" target="association_path">
                                    <parameter expr="end_state_xml"/>
                                </raise>
                            </transition>


                            <!-- Event received from a state, that the edge end is currently hoovering it. -->
                            <transition event="transition_end_over_state" target=".">
                                <parameter name="element" type="SGUICanvasElement"/>
                                <parameter name="position" type="Vector2"/>
                                <script>
                                    String association_path = String.Format("all_transitions[{0}]", this.all_transitions_map[this.current_transition.tag]);
                                </script>
                                <raise event="transition_end_over_state" target="association_path">
                                    <parameter expr="element"/>
                                    <parameter expr="position"/>
                                </raise>
                            </transition>

                        </state>
                        <onexit>
                            <raise event="transition_creation_stopped" target='"all_states"'/>
                        </onexit>
                    </state> <!-- end of transition creation -->
                    <history id="history" type="deep"/>
                </state> <!-- end of saving history -->
                
                
                <!-- ACTIVATION OF A CREATED STATE -->

                <state id="state_activation">
                    <transition event="instance_created" cond='association_name.EndsWith("/all_states")' target="../hierarchy_connection">
                        <parameter name="id" type="int"/>
                        <parameter name="association_name" type="String"/>
                        <script>
                            String association_path = String.Format("{0}[{1}]", association_name, id);
                            this.all_states_map[this.current_element.tag] = id;
                        </script>
                        <raise scope="cd" event="associate_instance">
                            <parameter expr='"."'/>
                            <parameter expr='association_path + "/parent"' />
                        </raise>
                        <raise scope="cd" event="associate_instance">
                            <parameter expr='"."'/>
                            <parameter expr='association_path + "/canvas"' />
                        </raise>
                        <raise scope="cd" event="associate_instance">
                            <parameter expr='association_path' />
                            <parameter expr='"./children"'/>
                        </raise>
                        <raise scope="cd" event="start_instance">
                            <parameter expr='association_path' />
                        </raise>
                    </transition>
                </state>
                
                <!-- ACTIVATION OF A LOADED STATE -->
                
                <state id="loaded_state_activation">
                    <transition event="instance_created" target="../hierarchy_connection">
                        <parameter name="id" type="int"/>
                        <parameter name="association_name" type="String"/>
                        <script>
                            String child_path = String.Format("{0}[{1}]", association_name, id);
                            this.all_states_map[this.current_element.tag] = id;
                                                        
                            SGUICanvasElement parent_widget;
                            this.state_xml_to_widget.TryGetValue(this.current_xml_element.Parent, out parent_widget);
                            String parent_path = ".";
                            if (parent_widget != null)
                            {
                                parent_path = String.Format("all_states[{0}]", this.all_states_map[parent_widget.tag]);
                            }
                            this.states_to_load.RemoveAt(this.states_to_load.Count - 1);
                        </script>
                        <!-- Associate canvas -->
                        <raise scope="cd" event="associate_instance">
                            <parameter expr='"."'/>
                            <parameter expr='child_path + "/canvas"' />
                        </raise>
                        <!-- Set parent association of created state -->
                        <raise scope="cd" event="associate_instance">
                            <parameter expr='parent_path'/>
                            <parameter expr='child_path + "/parent"' />
                        </raise>
                        <!-- Add state to the children association of its parent -->
                        <raise scope="cd" event="associate_instance">
                            <parameter expr='child_path' />
                            <parameter expr='parent_path + "/children"'/>
                        </raise>
                        <!-- Start loaded state -->
                        <raise scope="cd" event="start_instance">
                            <parameter expr='child_path' />
                        </raise>
                        <!-- Unselect loaded state -->
                        <raise event="unselect" target='child_path'>
                            <parameter expr='-1'/>
                        </raise>
                    </transition>
                </state>
                
                <!-- STATE HIERARCHY CONNECTION STATE -->
                
                <state id="hierarchy_connection">
                    <transition event="instance_associated" cond='association_name.EndsWith("/children")' target="../saving_history/history">
                        <parameter name="id" type="int"/>
                        <parameter name="association_name" type="String"/>
                        <script>
                            String parent_path = association_name.Substring(0, association_name.Length-9);
                        </script>
                        <raise event="new_child" target="parent_path">
                            <parameter expr="id"/>
                            <parameter expr="this.current_element"/>
                            <parameter expr="this.current_xml_element"/>
                        </raise>
                        <script>
                            this.current_element = null;
                            this.current_xml_element = null;
                        </script>
                    </transition>
                </state>
                
                
                
                                                              
            </state> <!-- end of state dependent actions -->
        </parallel>
        
        
    </scxml>
</class>
