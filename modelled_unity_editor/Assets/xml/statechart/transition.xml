<?xml version="1.0" encoding="UTF-8" ?>
<class name="Transition">
    <relationships>
        <association class="Canvas" name="canvas" max="1"/>
    </relationships>
    <attribute type="SGUICanvasEdge" name="edge_widget"/>
    <attribute type="XElement" name="transition_xml"/>
    <attribute type="bool" name="is_loading"/>
    <constructor>
        <parameter type="SGUICanvasEdge" name="edge_widget"/>
        <parameter type="XElement" name="xml"/>
        <parameter type="bool" name="is_loading"/>
        <body>
            <![CDATA[
            this.edge_widget = edge_widget;
            this.is_loading = is_loading;
            if (is_loading)
                this.loadTransition(xml);
            else
                this.newTransition(xml);            
            ]]>
        </body>
    </constructor>
    <destructor>
        <body>
            this.edge_widget.delete();
            this.transition_xml.Remove();
        </body>
    </destructor>
    <method type="void" name="loadTransition">
        <parameter type="XElement" name="transition_xml"/>
        <body>
            this.transition_xml = transition_xml;            
            SCCDUtility.assureAttribute(transition_xml, "x-offset", "0");
            SCCDUtility.assureAttribute(transition_xml, "y-offset", "0");
            SCCDUtility.assureAttribute(transition_xml, "label");
            this.edge_widget.setLabel(transition_xml.Attribute("label").Value);
            this.edge_widget.moveLabel(new Vector2(
                float.Parse(transition_xml.Attribute("x-offset").Value),
                float.Parse(transition_xml.Attribute("y-offset").Value)
            ));
            foreach(XElement point in this.transition_xml.Elements("point"))
            {
                this.edge_widget.addControlPoint(new Vector2(
                    float.Parse(point.Attribute("x").Value),
                    float.Parse(point.Attribute("y").Value)
                ));
            }
        </body>
    </method>
    <method type="void" name="newTransition">
        <parameter type="XElement" name="state_xml"/>
        <body>            
            //state_xml is parent, create XElement for state
            this.transition_xml = new XElement("transition", 
                new XAttribute("event", ""),
                new XAttribute("port", ""),
                new XAttribute("target", ""),
                new XAttribute("after", ""),
                new XAttribute("label", ""),
                new XAttribute("x-offset", 0),
                new XAttribute("y-offset", 0),
                new XAttribute("start-id", this.edge_widget.start.point_id.ToString()),
                new XAttribute("end-id", 0)
            );
            state_xml.Add(this.transition_xml);
        </body>
    </method>
    <method type="void" name="setControlPoints">
        <body>
            foreach( XElement point in this.transition_xml.Elements("point"))
            {
                point.Remove();
            }
            foreach(Vector2 point in this.edge_widget.control_points)
            {
                this.transition_xml.Add(new XElement(
                    "point",
                    new XAttribute("x", point.x),
                    new XAttribute("y", point.y)
                ));
            }
        </body>
    </method>
    <scxml initial="setup">
    
        <state id="setup">
            <transition cond="!this.is_loading" target="../creation"/>
            <transition cond="this.is_loading" target="../active"/>
        </state>

        <state id="creation" initial="state_drag">
            <history type="deep" id="history"/>
            
            <transition event="middle-mouse-down" port="input" target="history">
                <parameter name="tag" type="int"/>
                <parameter name="position" type="Vector2"/>
                <script>
                    if (this.edge_widget.hasControlPoints())
                    {
                        this.edge_widget.popControlPoint();
                        this.edge_widget.popControlPoint();
                        this.edge_widget.addControlPoint(position);
                    }
                </script>
            </transition>

            <!-- EDGE END IS CURRENTLY OVER A STATE -->
    
            <state id="state_drag">
                <transition event="transition_finished" cond="this.edge_widget.end != null" target="../../active/selected">
                    <parameter type="XElement" name="end_state_xml"/>
                    <script>
                        this.transition_xml.Attribute("end-id").Value = this.edge_widget.end.point_id.ToString();
                        this.transition_xml.Attribute("target").Value = SCCDUtility.createTargetString(end_state_xml);
                        this.setControlPoints();
                    </script>
                </transition>
                
                <transition event="transition_finished" cond="this.edge_widget.end == null" target="../../destroyed">
                    <raise event="transition_cancelled" target='"canvas"'/>
                </transition>             
                
                <transition event="transition_end_over_state" cond="this.edge_widget.end != null" target=".">
                    <parameter name="element" type="SGUICanvasElement"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        //this.edge_widget.adjustEndPoint(position);
                        this.edge_widget.createEndPoint(element, position);
                    </script>
                </transition>
                
                <!-- mouse dragging over canvas, change state - add control point - remove end point -->
                
                <transition event="right-mouse-drag" port="input" cond="this.edge_widget.canvas.tag == tag" target="../canvas_drag">
                    <parameter name="tag" type="int"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.addControlPoint(position); // Current mouse position as temporary control point
                        this.edge_widget.removeEndPoint();
                    </script>
                </transition>
            </state>
            
            <!-- EDGE IS CURRENTLY ON CANVAS (NOT OVER STATE) -->  
            <state id="canvas_drag">
            
                <transition event="transition_end_over_state" target="../state_drag">
                    <parameter name="element" type="SGUICanvasElement"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.popControlPoint();
                        this.edge_widget.createEndPoint(element, position);
                    </script>
                </transition>
                
                <transition event="right-mouse-up" port="input" cond="this.edge_widget.canvas.tag == tag" target="../../destroyed">
                    <parameter name="tag" type="int"/>
                    <raise event="transition_cancelled" target='"canvas"'/>
                </transition>

                <transition event="right-mouse-drag" port="input" cond="this.edge_widget.canvas.tag == tag" target=".">
                    <parameter name="tag" type="int"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.popControlPoint();
                        this.edge_widget.addControlPoint(position); // Current mouse position as temporary control point
                    </script>
                </transition>
                <transition event="left-mouse-down" port="input" cond="this.edge_widget.canvas.tag == tag" target=".">
                    <parameter name="tag" type="int"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.popControlPoint();
                        this.edge_widget.addControlPoint(position); // New control point
                        this.edge_widget.addControlPoint(position); // Current mouse position as temporary control point
                    </script>
                </transition>
            </state>
        </state> <!-- end of creation state -->

        <state id="active" initial="not_selected">
            <state id="not_selected">
                <transition event="left-mouse-down" port="input"  cond="tag == this.edge_widget.tag" target="../selected">
                    <parameter name="tag" type="int"/>
                    <parameter type="Vector2" name="position"/>
                    <raise event="unselect" target='"canvas"'>
                        <parameter expr='this.edge_widget.tag'/>
                    </raise>
                    <script>
                        //this.edge_widget.pushToFront();
                    </script>
                </transition>
            </state>
            <state id="selected">
                <onentry>
                    <script>
                        this.edge_widget.setLabelStyle("emphtitle");
                    </script>
                    <raise event="set_transition_properties" target='"canvas/window/properties_panel"'>
                        <parameter expr='this.transition_xml' />
                        <parameter expr='this.edge_widget' />
                    </raise>
                </onentry>
                <onexit>
                    <script>
                        this.edge_widget.resetLabelStyle();
                    </script>
                    <raise event="reset_panel" target='"canvas/window/properties_panel"'/>
                </onexit>
                
                <transition event="unselect" target="../not_selected" cond="this.edge_widget.tag != except_tag">
                    <parameter type="int" name="except_tag"/>
                </transition>
                
                <transition target="/destroyed" port="input" event="key-down" cond="key_code == KeyCode.Delete">
                    <parameter type="KeyCode" name="key_code"/>
                    <raise event="remove_transition" target='"canvas"'>
                        <parameter expr="this.edge_widget"/>
                    </raise>
                </transition>
                
                <transition target="." port="input" event="left-mouse-drag" cond="tag == this.edge_widget.tag || tag == this.edge_widget.canvas.tag">
                    <parameter type="int" name="tag"/>
                    <parameter type="Vector2" name="position"/>
                    <parameter type="Vector2" name="delta"/>
                    <script>
                        this.edge_widget.moveLabel(delta);
                        this.transition_xml.Attribute("x-offset").Value = this.edge_widget.label_offset.x.ToString();
                        this.transition_xml.Attribute("y-offset").Value = this.edge_widget.label_offset.y.ToString();
                    </script>
                </transition>
            
            </state>
            
        </state>
        
        <state id="destroyed"/>

    </scxml>
</class>
