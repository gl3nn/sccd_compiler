<?xml version="1.0" encoding="UTF-8" ?>
<class name="ClassDiagramWindow">
    <relationships>
        <association class="MenuStrip" name="menu_strip" max="1"/>
        <association class="Toolbar" name="toolbar" max="1"/>
        <association class="Canvas" name="canvas" max="1"/>
        <association class="PropertiesPanel" name="properties_panel" max="1"/>
    </relationships>
    <attribute type="SGUITopLevel" name="window_widget"/>
    <attribute type="SGUIHorizontalGroup" name="horizontal_container"/>
    <attribute type="SGUIVerticalGroup" name="canvas_container"/>
    <attribute type="XDocument" name="xml_document"/>
    <attribute type="string" name="file_path"/>
    <constructor>
        <parameter type="SGUITopLevel" name="window_widget"/>
        <parameter type="string" name="file_name"/>
        <body>
            <![CDATA[
            this.window_widget = window_widget;
            this.file_path = System.IO.Path.GetFullPath(file_name);
            if (System.IO.File.Exists(this.file_path))
            {
                Debug.Log("File exists! loading..");
                this.loadXMLFile();
            }
            else
            {
                Debug.Log("File doesn't exist! creating");
                this.newXMLFile();
            }
            ]]>
        </body>
    </constructor>
    <method type="void" name="newXMLFile">
        <body>
            XElement xml_diagram = new XElement("diagram",
                new XAttribute("name", "name"),
                new XElement("description", "description"),
                new XElement("top", "using UnityEngine;")
            );
            this.xml_document = new XDocument(
                new XDeclaration("1.0", "utf-8", "yes"),
                xml_diagram
            );
        </body>
    </method>
    <method type="void" name="loadXMLFile">
        <body>
            this.xml_document = XDocument.Load(this.file_path);
            XElement xml_diagram = this.xml_document.Element("diagram");
            if (xml_diagram == null)
            {
                xml_diagram = new XElement("diagram",
                    new XAttribute("name", ""),
                    new XAttribute("author", ""),
                    new XElement("description", "description"),
                    new XElement("top", "using UnityEngine;")
                );
                this.xml_document.Add(xml_diagram);
            }
        </body>
    </method>
    <method type="XElement" name="fetchXMLDiagram">
        <body>
            return this.xml_document.Element("diagram");
        </body>
    </method>
    <scxml initial="setup">
        <state id="setup" initial="menustrip_creation">
            <state id="menustrip_creation">
                <onentry>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"menu_strip"' />
                        <parameter expr='"MenuStrip"'/>
                        <parameter expr='this.window_widget' />
                    </raise>
                </onentry>
                <transition event="instance_created" target="../toolbar_creation">
                    <raise scope="cd" event="associate_instance">
                        <parameter expr='"."' />
                        <parameter expr='"menu_strip/window"'/>
                    </raise>
                    <raise scope="cd" event="start_instance">
                        <parameter expr='"menu_strip"' />
                    </raise>
                </transition>
            </state>
            <state id="toolbar_creation">
                <onentry>
                    <script>
                        this.horizontal_container = new SGUIHorizontalGroup();
                        this.window_widget.addChild(this.horizontal_container);
                        this.canvas_container = new SGUIVerticalGroup();
                        this.horizontal_container.addChild(this.canvas_container);
                    </script>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"toolbar"' />
                        <parameter expr='"Toolbar"'/>
                        <parameter expr='this.canvas_container' />
                    </raise>
                </onentry>
                <transition event="instance_created" target="../canvas_creation">
                    <raise scope="cd" event="associate_instance">
                        <parameter expr='"."' />
                        <parameter expr='"toolbar/window"'/>
                    </raise>
                    <raise scope="cd" event="start_instance">
                        <parameter expr='"toolbar"' />
                    </raise>
                </transition>
            </state>
            <state id="canvas_creation">
                <onentry>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"canvas"' />
                        <parameter expr='"Canvas"'/>
                        <parameter expr='this.canvas_container' />
                        <parameter expr='this.fetchXMLDiagram()' />
                    </raise>
                </onentry>
                <transition event="instance_created" target="../properties_panel_creation">
                    <raise scope="cd" event="associate_instance">
                        <parameter expr='"."' />
                        <parameter expr='"canvas/window"'/>
                    </raise>
                    <raise scope="cd" event="associate_instance">
                        <parameter expr='"canvas"' />
                        <parameter expr='"toolbar/canvas"'/>
                    </raise>
                    <raise scope="cd" event="start_instance">
                        <parameter expr='"canvas"' />
                    </raise>
                </transition>
            </state>
            <state id="properties_panel_creation">
                <onentry>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"properties_panel"' />
                        <parameter expr='"PropertiesPanel"'/>
                        <parameter expr='this.horizontal_container' />
                        <parameter expr='this.fetchXMLDiagram()' />
                    </raise>
                </onentry>
                <transition event="instance_created" target="../../listening">
                    <raise scope="cd" event="associate_instance">
                        <parameter expr='"canvas"' />
                        <parameter expr='"properties_panel/canvas"'/>
                    </raise>
                    <raise scope="cd" event="start_instance">
                        <parameter expr='"properties_panel"' />
                    </raise>
                </transition>
            </state>
        </state>
        <state id="listening">
            <transition event="save_diagram" target=".">
                <script>
                    Debug.Log("saving");
                    this.xml_document.Save(this.file_path);
                </script>
            </transition>
        </state>
    </scxml>
</class>
