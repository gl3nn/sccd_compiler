<?xml version="1.0" encoding="UTF-8" ?>
<class name="ClassProperties">
    <relationships>
        <association class="PropertiesPanel" name="panel" max="1"/>
        <association class="IRuntimeClass" name="children"/>
    </relationships>
    <attribute type="SGUIVerticalGroup" name="panel_widget"/>
    <attribute type="XElement" name='class_xml'/>
    <attribute type="SGUICanvasElement" name='class_widget'/>

    <attribute type="List&lt;XElement&gt;" name="elements_to_load"/>
    
    <attribute type="SGUITextField" name='name_field'/>
    <attribute type="SGUICheckBox" name='is_default_checkbox'/>

    <attribute type="SGUIVerticalGroup" name="attributes_group_widget"/>
    <attribute type="SGUIVerticalGroup" name="methods_group_widget"/>
    
    <attribute type="SGUIButton" name="open_statechart_button"/>
    <attribute type="SGUIButton" name="add_attribute_button"/>
    <attribute type="SGUIButton" name="add_method_button"/>
    
    <constructor>
        <parameter type="SGUIVerticalGroup" name='panel_widget'/>
        <parameter type="XElement" name='class_xml'/>
        <parameter type="SGUICanvasElement" name='class_widget'/>
        <body>
            <![CDATA[
            this.panel_widget = panel_widget;
            this.class_xml = class_xml;
            this.class_widget = class_widget;
            
            //Name property setup
            SCCDUtility.assureAttribute(this.class_xml, "name");
            this.name_field = new SGUITextField("name", this.class_xml.Attribute("name").Value);
            this.panel_widget.addChild(this.name_field);
            
            //Is this the default class?
            SCCDUtility.assureAttribute(this.class_xml, "default", "false");
            this.is_default_checkbox = new SGUICheckBox("Is Default", this.class_xml.Attribute("default").Value == "true");
            this.panel_widget.addChild(this.is_default_checkbox);
            
            //Statechart
            this.open_statechart_button = new SGUIButton("Edit Statechart");
            this.panel_widget.addChild(this.open_statechart_button);
            
            //Attributes setup
            SGUIHorizontalGroup attributes_heading = new SGUIHorizontalGroup();
            attributes_heading.addChild(new SGUILabel("Attributes:"));
            this.add_attribute_button = new SGUIButton("Add");
            attributes_heading.addChild(this.add_attribute_button);
            this.panel_widget.addChild(attributes_heading);
            this.attributes_group_widget = new SGUIVerticalGroup();
            this.attributes_group_widget.setExpandHeight(false);
            this.panel_widget.addChild(this.attributes_group_widget);
            
            //Methods setup
            SGUIHorizontalGroup methods_heading = new SGUIHorizontalGroup();
            methods_heading.addChild(new SGUILabel("Methods:"));
            this.add_method_button = new SGUIButton("Add");
            methods_heading.addChild(this.add_method_button);
            this.panel_widget.addChild(methods_heading);
            this.methods_group_widget = new SGUIVerticalGroup();
            this.methods_group_widget.setExpandHeight(false);
            this.panel_widget.addChild(this.methods_group_widget);
            
            //Elements loading
            this.elements_to_load = this.class_xml.Elements("attribute").ToList();
            this.elements_to_load.AddRange(this.class_xml.Elements("method"));
            this.elements_to_load.Reverse();

            ]]>
        </body>
    </constructor>
    <destructor>
        <body>
            this.panel_widget.clearChildren();
        </body>
    </destructor>
    <scxml initial="saving_history">
        <state id="saving_history" initial="loading">
            <state id="loading">
                <transition target="/default_activation" cond="this.elements_to_load.Count &gt; 0">
                    <script>
                        XElement element_xml = this.elements_to_load[this.elements_to_load.Count - 1];
                        object group_widget = null;
                        string class_name = "";
                        if (SCCDUtility.hasName(element_xml, "attribute"))
                        {
                            class_name = "Attribute";
                            group_widget = this.attributes_group_widget;
                        }
                        else if (SCCDUtility.hasName(element_xml, "method"))
                        {
                            class_name = "Method";
                            group_widget = this.methods_group_widget;
                        }
                    </script>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"children"' />
                        <parameter expr='class_name'/>
                        <parameter expr='element_xml' />
                        <parameter expr='group_widget' />
                    </raise>
                    <script>
                        this.elements_to_load.RemoveAt(this.elements_to_load.Count - 1);
                    </script>
                </transition>
                <transition target="../listening" cond="this.elements_to_load.Count == 0">
                    <script>
                        this.elements_to_load = null;
                    </script>
                </transition>
            </state>
            
            <state id="listening">
                
                <!-- Add attribute button pressed -->
                
                <transition port="input" event="button_pressed" cond='tag == this.add_attribute_button.tag' target="../../default_activation">
                    <parameter name="tag" type="int"/>
                    <script>
                        XElement attribute_xml = new XElement("attribute");
                        this.class_xml.Add(attribute_xml);
                    </script>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"children"' />
                        <parameter expr='"Attribute"'/>
                        <parameter expr='attribute_xml' />
                        <parameter expr='this.attributes_group_widget' />
                    </raise>
                </transition>
                
                <!-- Add method button pressed -->
                
                <transition port="input" event="button_pressed" cond='tag == this.add_method_button.tag' target="../../default_activation">
                    <parameter name="tag" type="int"/>
                    <script>
                        XElement method_xml = new XElement("method", new XAttribute("name", "newMethod"));
                        this.class_xml.Add(method_xml);
                    </script>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"children"' />
                        <parameter expr='"Method"'/>
                        <parameter expr='method_xml' />
                        <parameter expr='this.methods_group_widget' />
                    </raise>
                </transition>
                
                <!-- Edit statechart button pressed -->
                <transition port="input" event="button_pressed" cond='tag == this.open_statechart_button.tag' target=".">
                    <parameter name="tag" type="int"/>
                    <script>
                        StateChartEditorWindow.createOrFocus(this.class_xml);
                    </script>
                </transition>
                
                <!-- Name field changed, edit @name -->
                <transition event="changed" port="input" cond='this.name_field.tag == tag' target=".">
                    <parameter name="tag" type="int"/>
                    <script>
                        this.class_xml.Attribute("name").Value = this.name_field.text;
                        this.class_widget.label = this.name_field.text;
                    </script>
                </transition>
                
                <!-- is_default_checkbox changed, edit @defauly -->
                <transition event="changed" port="input" cond='this.is_default_checkbox.tag == tag' target=".">
                    <parameter name="tag" type="int"/>
                    <script>
                        if (this.is_default_checkbox.is_checked)
                        {
                            foreach (XElement sibling_xml in this.class_xml.Parent.Elements("class"))
                            {
                                sibling_xml.Attribute("default").Value = "false";
                            }
                            foreach (SGUICanvasElement sibling in this.class_widget.parent.elements)
                            {
                                sibling.setLabelStyle("title");
                            }
                            this.class_xml.Attribute("default").Value = "true";
                            this.class_widget.setLabelStyle("emphtitle");
                        }
                        else
                        {
                            this.class_xml.Attribute("default").Value = "false";
                            this.class_widget.setLabelStyle("title");
                        }
                    </script>
                </transition>

            </state>
            <history id="history" type="deep"/>
        </state>
        
        
        <state id="default_activation">
            <transition event="instance_created" target="../saving_history/history">
                <parameter name="id" type="int"/>
                <parameter name="association_name" type="String"/>
                <script>
                    String association_path = String.Format("{0}[{1}]", association_name, id);
                </script>
                <raise scope="cd" event="associate_instance">
                    <parameter expr='"."' />
                    <parameter expr='association_path + "/parent"'/>
                </raise>
                <raise scope="cd" event="start_instance">
                    <parameter expr='association_path' />
                </raise>
                <raise target="association_path" event="set_child_id">
                    <parameter expr='id' />
                </raise>
            </transition>
        </state>
    </scxml>
</class>
