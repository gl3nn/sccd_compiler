<?xml version="1.0" encoding="UTF-8" ?>
<class name="Edge">
    <relationships>
        <association class="Canvas" name="canvas" max="1"/>
    </relationships>
    <attribute type="SGUICanvasEdge" name="edge_widget"/>
    <constructor>
        <parameter type="SGUICanvasEdge" name="edge_widget"/>
        <body>
            <![CDATA[
            this.edge_widget = edge_widget;
            ]]>
        </body>
    </constructor>
    <scxml initial="creation">

        <state id="creation" initial="state_drag">
            <history type="deep" id="history"/>
            
            <transition event="middle-mouse-down" port="input" target="history">
                <parameter name="tag" type="int"/>
                <parameter name="position" type="Vector2"/>
                <script>
                    if (this.edge_widget.hasControlPoints())
                    {
                        this.edge_widget.popControlPoint();
                        this.edge_widget.popControlPoint();
                        this.edge_widget.addControlPoint(position);
                    }
                </script>
            </transition>

        <!-- state where mouse is over an element (which might be used as end for the edge -->
    
            <state id="state_drag">
                <transition event="edge_end" target="../../idle">
                    <parameter name="element" type="SGUICanvasElement"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.adjustEndPoint(position);
                    </script>
                    <raise event="edge_finished" target='"canvas"'/>
                </transition>
                <transition event="over_edge_end" target=".">
                    <parameter name="element" type="SGUICanvasElement"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.adjustEndPoint(position);
                    </script>
                </transition>
                <transition event="right-mouse-drag" port="input" cond="this.edge_widget.canvas.tag == tag" target="../canvas_drag">
                    <parameter name="tag" type="int"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        /*if (!this.edge_widget.hasControlPoints())
                        {
                            this.edge_widget.start.setClosest(position);
                        }*/
                        this.edge_widget.addControlPoint(position); // Current mouse position as temporary control point
                        this.edge_widget.removeEndPoint();
                    </script>
                </transition>
            </state>
            <state id="canvas_drag">
            
            
            
                <transition event="over_edge_end" target="../state_drag">
                    <parameter name="element" type="SGUICanvasElement"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.popControlPoint();
                        this.edge_widget.createEndPoint(element, position);
                    </script>
                </transition>
                
                <transition event="right-mouse-up" port="input" cond="this.edge_widget.canvas.tag == tag" target="../../destroyed">
                    <parameter name="tag" type="int"/>
                    <raise event="edge_cancelled" target='"canvas"'/>
                </transition>

                <transition event="right-mouse-drag" port="input" cond="this.edge_widget.canvas.tag == tag" target=".">
                    <parameter name="tag" type="int"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.popControlPoint();
                        /*if (!this.edge_widget.hasControlPoints())
                        {
                            this.edge_widget.start.setClosest(position);
                        }*/
                        this.edge_widget.addControlPoint(position); // Current mouse position as temporary control point
                    </script>
                </transition>
                <transition event="left-mouse-down" port="input" cond="this.edge_widget.canvas.tag == tag" target=".">
                    <parameter name="tag" type="int"/>
                    <parameter name="position" type="Vector2"/>
                    <script>
                        this.edge_widget.popControlPoint();
                        /*if (!this.edge_widget.hasControlPoints())
                        {
                            this.edge_widget.start.setClosest(position);
                        }*/
                        this.edge_widget.addControlPoint(position); // New control point
                        this.edge_widget.addControlPoint(position); // Current mouse position as temporary control point
                    </script>
                </transition>
            </state>
        </state>

        <state id="idle">

        </state>
        <state id="destroyed">
            <onentry>
                <script>
                    this.edge_widget.delete();
                </script>
            </onentry>
        </state>
    </scxml>
</class>
