<?xml version="1.0" encoding="UTF-8" ?>
<class name="State">
    <relationships>
        <association class="State" name="children"/>
        <association class="IRuntimeClass" name="parent" max="1"/>
        <association class="Canvas" name="canvas" max="1"/>
        <association class="StateDrop" name="state_drop" max="1"/>
    </relationships>
    <attribute type="SGUICanvasElement" name="widget"/>
    <attribute type="Dictionary&lt;int, int&gt;" name="children_map"/>
    <attribute type="XElement" name="state_xml" />
    <constructor>
        <parameter type="SGUICanvasElement" name="widget"/>
        <parameter type="XElement" name="xml"/>
        <parameter type="bool" name="is_loading"/>
        <body>
            <![CDATA[
            this.widget = widget;
            this.children_map = new Dictionary<int,int>();
            if (is_loading)
            {
                this.state_xml = xml;
                // set position
                this.widget.setPosition(
                    float.Parse(this.state_xml.Attribute("x").Value),
                    float.Parse(this.state_xml.Attribute("y").Value),
                    float.Parse(this.state_xml.Attribute("w").Value),
                    float.Parse(this.state_xml.Attribute("h").Value)
                );
                SCCDUtility.assureAttribute(this.state_xml, "id", "NoNameState");
            }
            else
            {
                //xml is parent, create XElement for state
                this.state_xml = new XElement("state", 
                    new XAttribute("id", "NewState"),
                    new XAttribute("x", this.widget.position.x.ToString()),
                    new XAttribute("y", this.widget.position.y.ToString()),
                    new XAttribute("w", this.widget.position.width.ToString()),
                    new XAttribute("h", this.widget.position.height.ToString())
                );
                xml.Add(this.state_xml);
            }
            this.widget.label = this.state_xml.Attribute("id").Value;
            ]]>
        </body>
    </constructor>
    <scxml initial="main">            
        <parallel id="main">
        
            <!-- STATE INDEPENDENT ACTIONS -->
            
            <state id="state_independent_actions" initial="listening">
                <state id="listening">
                
                    <!--  -->

                    <transition event="new_child" target=".">
                        <parameter type="int" name="id"/>
                        <parameter type="SGUICanvasElement" name="child"/>
                        <script>
                            this.widget.addElement(child);
                            this.children_map[child.tag] = id;
                            this.widget.adjustSize();
                        </script>
                    </transition>

                    <transition event="adjust_size" target=".">
                        <script>
                            this.widget.adjustSize();
                        </script>
                    </transition>

                    <transition event="disconnect_child" target=".">
                        <parameter name="child" type="SGUICanvasElement"/>
                        <raise scope="cd" event="unassociate_instance">
                            <parameter expr='String.Format("children[{0}]", this.children_map[child.tag])' />                          
                        </raise>
                        <script>
                            this.children_map.Remove(child.tag);
                            this.widget.removeElement(child);
                        </script>
                    </transition>
 
                </state>
            </state>
            
            <!-- STATE DEPENDENT ACTIONS -->
            
            <state id="state_dependent_actions" initial="setup">
                    
                <!-- Only on initial creation of the state we want to enter the drop state as default. -->

                <state id="setup">
                    <transition target="../default/selected/drop/"/>
                </state>

                <state id="default" initial="not_selected">

                    <!-- Signal the start of the creation of an edge -->

                    <transition event="right-mouse-down" port="input" cond="tag == this.widget.tag" target="../edge_creation">
                        <parameter name="tag" type="int"/>
                        <parameter type="Vector2" name="position"/>
                        <raise event="create_edge" target='"canvas"'>
                            <parameter expr='this.widget'/>
                            <parameter expr="position"/>
                        </raise>
                    </transition>
                    
                    <!-- Some other state initiated edge creation, nonetheless enter the EDGE CREATION state -->
                    
                    <transition event="enter_edge_creation" target="../edge_creation"/>
                    
                    <!-- NOT SELECTED STATE -->
                    
                    <state id="not_selected">
                        <transition event="left-mouse-down" port="input"  cond="tag == this.widget.tag" target="../selected">
                            <parameter name="tag" type="int"/>
                            <raise event="unselect" target='"canvas"'>
                                <parameter expr='this.widget.tag'/>
                            </raise>
                            <script>
                                this.widget.pushToFront();
                            </script>
                        </transition>
                        <transition event="middle-mouse-down" port="input"  cond="tag == this.widget.tag" target=".">
                            <parameter name="tag" type="int"/>
                            <raise event="unselect" target='"canvas"'>
                                <parameter expr='this.widget.tag'/>
                            </raise>
                        </transition>
                    </state>
                    
                    <!-- SELECTED STATE -->
                    
                    <state id="selected" initial="not_dragging">
                        <onentry>
                            <script>
                                this.widget.setColor(Color.Lerp(GUI.backgroundColor, Color.green, 0.5f));
                            </script>
                            <raise event="set_state_properties" target='"canvas/window/properties_panel"'>
                                <parameter expr='this.state_xml' />
                                <parameter expr='this.widget' />
                            </raise>
                        </onentry>
                        <onexit>
                            <script>
                                this.widget.resetColor();
                            </script>
                        </onexit>
                        <transition event="unselect" target="../not_selected" cond="this.widget.tag != except_tag">
                            <parameter type="int" name="except_tag"/>
                        </transition>
                        
                        <!-- NOT DRAGGING STATE -->
                        
                        <state id="not_dragging">
                        
                            <!-- Left mouse drag causes state to be moved and the Dragging state to be entered -->
                        
                            <transition target="../dragging" port="input" event="left-mouse-drag">
                                <parameter type="int" name="tag"/>
                                <parameter type="Vector2" name="position"/>
                                <parameter type="Vector2" name="delta"/>
                                <script>
                                    this.widget.move(delta);
                                </script>
                            </transition>
                        </state>
                        
                        <!-- DRAGGING STATE -->
                        
                        <state id="dragging">
                        
                            <!-- For each left-mouse-drag event move the state -->
                        
                            <transition target="." port="input" event="left-mouse-drag">
                                <parameter type="int" name="tag"/>
                                <parameter type="Vector2" name="position"/>
                                <parameter type="Vector2" name="delta"/>
                                <script>
                                    this.widget.move(delta);
                                </script>
                            </transition>
                            
                            <!-- End dragging, enter drop state -->
                            
                            <transition target="../drop" port="input" event="left-mouse-up"/>
                        </state>
                        
                        <!-- DROP STATE -->
                        
                        <state id="drop" initial="drop_window_creation">
                            <state id="drop_window_creation">
                                <onentry>
                                    <raise scope="cd" event="create_instance">
                                        <parameter expr='"state_drop"' />
                                        <parameter expr='"StateDrop"'/>
                                        <parameter expr='this.widget' />
                                    </raise>
                                    <raise scope="cd" event="associate_instance">
                                        <parameter expr='"."' />
                                        <parameter expr='"state_drop/dropped_state"'/>
                                    </raise>
                                </onentry>
                                
                                <transition event="instance_associated" target="../wait_for_drop_window">
                                    <parameter name="id" type="int"/>
                                    <parameter name="association_name" type="String"/>
                                    <raise scope="cd" event="start_instance">
                                        <parameter expr='"state_drop"' />
                                    </raise>
                                </transition>
                            </state>
                            <state id="wait_for_drop_window">
                                <onexit>
                                    <raise scope="cd" event="delete_instance">
                                        <parameter expr='"state_drop"' />
                                    </raise>
                                </onexit>
                                <transition event="not_change_connection" target="../../not_dragging">
                                    <raise target='"parent"' event="adjust_size"/>
                                </transition>
                                <transition event="change_connection" target="../../not_dragging">
                                    <parameter type="SGUICanvasElement" name="connection"/>
                                    <raise event="disconnect_child" target='"parent"'>
                                        <parameter expr="this.widget"/>
                                    </raise>
                                    <raise scope="cd" event="unassociate_instance">
                                        <parameter expr='"parent"' />                          
                                    </raise>
                                    <raise event="connect_child_to_parent" target='"canvas"'>
                                        <parameter expr="this.widget"/>
                                        <parameter expr="connection"/>
                                    </raise>
                                </transition>
                            </state>
                        </state>
                    </state>
                </state>
                
                <!-- EDGE CREATION MODE. IS ENTERED WHENEVER AN EDGE IS BEING CREATED. -->
                
                <state id="edge_creation">
                    
                    <!-- Signal that this is a valid end connection for the edge being created. -->
                    
                    <transition event="right-mouse-up" port="input" cond="tag == this.widget.tag" target="../default">
                        <parameter name="tag" type="int"/>
                        <parameter name="position" type="Vector2"/>
                        <raise event="edge_end" target='"canvas"'>
                            <parameter expr="this.widget"/>
                            <parameter expr="position"/>
                        </raise>
                    </transition>
                    
                    <!-- Signal that a possible end connection is targeted. -->
                    
                    <transition event="right-mouse-drag" port="input" cond="tag == this.widget.tag" target=".">
                        <parameter name="tag" type="int"/>
                        <parameter name="position" type="Vector2"/>
                        <raise event="over_edge_end" target='"canvas"'>
                            <parameter expr="this.widget"/>
                            <parameter expr="position"/>
                        </raise>
                    </transition>
                    
                    <!-- Edge creation terminated. Return to default. -->
                    
                    <transition event="edge_creation_stopped" target="../default"/>

                </state>
            </state>
        </parallel>
    </scxml>
</class>
