<?xml version="1.0" encoding="UTF-8" ?>
<class name="ClassDiagramWindow">
    <relationships>
        <association class="MenuStrip" name="menu_strip" max="1"/>
        <association class="Canvas" name="canvas" max="1"/>
        <association class="PropertiesPanel" name="properties_panel" max="1"/>
    </relationships>
    <attribute type="SGUIEditorWindow" name="window_widget"/>
    <attribute type="SGUIHorizontalGroup" name="horizontal_container"/>
    <attribute type="XDocument" name="xml_document"/>
    <attribute type="SCCDScript" name="sccd_script"/>
    <attribute type="string" name="file_path" init-value=""/>
    <constructor>
        <parameter type="SGUIEditorWindow" name="window_widget"/>
        <parameter type="SCCDScript" name="sccd_script"/>
        <body>
            <![CDATA[
            this.window_widget = window_widget;
            this.sccd_script = sccd_script;
            if (System.IO.File.Exists(sccd_script.xml_file)){
                this.file_path = sccd_script.xml_file;
                this.loadXMLFile();
            } else
            {
                this.file_path = "";
                this.newXMLFile();
            }
            ]]>
        </body>
    </constructor>
    <method type="void" name="newXMLFile">
        <body>
            XElement xml_diagram = new XElement("diagram",
                new XAttribute("name", "SCCDNameSpace"),
                new XElement("description", "description"),
                new XElement("top", "using UnityEngine; using Event = sccdlib.Event;")
            );
            this.xml_document = new XDocument(
                new XDeclaration("1.0", "utf-8", "yes"),
                xml_diagram
            );
        </body>
    </method>
    <method type="void" name="loadXMLFile">
        <body>
            this.xml_document = XDocument.Load(this.file_path);
            XElement xml_diagram = this.xml_document.Element("diagram");
            if (xml_diagram == null)
            {
                xml_diagram = new XElement("diagram",
                    new XAttribute("name", "SCCDNameSpace"),
                    new XAttribute("author", ""),
                    new XElement("description", "description"),
                    new XElement("top", "using UnityEngine;")
                );
                this.xml_document.Add(xml_diagram);
            }
        </body>
    </method>
    <method type="void" name="compileFile">
        <body>
            if (this.file_path != "" &amp;&amp; System.IO.File.Exists(sccd_script.xml_file))
            {
                Debug.Log("Compiling...");
                //this.window_widget.top_level_widget.addChild(new SGUILabel("Compiling..."));
                this.xml_document.Save(this.file_path);
                Logger.verbose = 2;
                var stdOut = System.Console.Out;
                System.IO.StringWriter consoleOut = new System.IO.StringWriter();
                System.Console.SetOut(consoleOut);
                try {
                    Compiler.generate(this.sccd_script.xml_file, System.IO.Path.ChangeExtension(this.sccd_script.xml_file, "cs"), CodeGenerator.Platform.GAMELOOP);
                } catch (Exception e) {
                    Debug.LogError(e);
                    return;
                }
                Debug.Log( consoleOut.ToString());
                System.Console.SetOut(stdOut);
                this.sccd_script.sccd_namespace = this.xml_document.Element("diagram").Attribute("name").Value;
                EditorUtility.SetDirty(this.sccd_script);
                AssetDatabase.Refresh();
                StateChartEditorWindow.clear();
            }
            else
            {
                Debug.LogError("Invalid file.");
            }
        </body>
    </method>
    <method type="XElement" name="fetchXMLDiagram">
        <body>
            return this.xml_document.Element("diagram");
        </body>
    </method>
    <scxml initial="setup">
        <state id="setup" initial="menustrip_creation">
            <state id="menustrip_creation">
                <onentry>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"menu_strip"' />
                        <parameter expr='"MenuStrip"'/>
                        <parameter expr='this.window_widget.top_level_widget' />
                    </raise>
                </onentry>
                <transition event="instance_created" target="../canvas_creation">
                    <raise scope="cd" event="associate_instance">
                        <parameter expr='"."' />
                        <parameter expr='"menu_strip/window"'/>
                    </raise>
                    <raise scope="cd" event="start_instance">
                        <parameter expr='"menu_strip"' />
                    </raise>
                </transition>
            </state>
            <state id="canvas_creation">
                <onentry>
                    <script>
                        this.horizontal_container = new SGUIHorizontalGroup();
                        this.window_widget.top_level_widget.addChild(this.horizontal_container);
                    </script>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"canvas"' />
                        <parameter expr='"Canvas"'/>
                        <parameter expr='this.horizontal_container' />
                        <parameter expr='this.fetchXMLDiagram()' />
                    </raise>
                </onentry>
                <transition event="instance_created" target="../properties_panel_creation">
                    <raise scope="cd" event="associate_instance">
                        <parameter expr='"."' />
                        <parameter expr='"canvas/window"'/>
                    </raise>
                    <raise scope="cd" event="start_instance">
                        <parameter expr='"canvas"' />
                    </raise>
                </transition>
            </state>
            <state id="properties_panel_creation">
                <onentry>
                    <raise scope="cd" event="create_instance">
                        <parameter expr='"properties_panel"' />
                        <parameter expr='"PropertiesPanel"'/>
                        <parameter expr='this.horizontal_container' />
                        <parameter expr='this.fetchXMLDiagram()' />
                    </raise>
                </onentry>
                <transition event="instance_created" target="../../listening">
                    <raise scope="cd" event="associate_instance">
                        <parameter expr='"canvas"' />
                        <parameter expr='"properties_panel/canvas"'/>
                    </raise>
                    <raise scope="cd" event="start_instance">
                        <parameter expr='"properties_panel"' />
                    </raise>
                </transition>
            </state>
        </state>
        <state id="listening">
            <!-- open file -->
            <transition event="open_file" target="../loading_file">
                <script>
                    this.window_widget.openLoadDialog();
                </script>
            </transition>
        
            <!-- ordinary save -->
            <transition event="save" cond='this.file_path != ""' target="../saving"/>
            
            <!-- ordinary save, but since no file -> save as -->
            <transition event="save" cond='this.file_path == ""' target="../saving_as"/>

            <!-- save_as -->
            <transition event="save_as" target="../saving_as"/>
            
            <!-- new -->
            <transition event="new_file" target=".">
                <script>
                    this.sccd_script.xml_file = "";
                    EditorUtility.SetDirty(this.sccd_script);
                    this.window_widget.restart();
                </script>
            </transition>
            
            <!-- compile -->
            <transition event="compile" target=".">
                <script>
                    this.compileFile();
                </script>
            </transition>

        </state>
        <state id="loading_file">
            <transition port="input" event="load_dialog_closed" target="../listening">
                <parameter type="string" name="load_path"/>
                <script>
                    this.file_path = load_path;
                    this.sccd_script.xml_file = this.file_path;
                    EditorUtility.SetDirty(this.sccd_script);
                    this.window_widget.restart();
                </script>
            </transition>
        </state>
        <state id="saving_as">
            <onentry>
                <script>
                    this.window_widget.openSaveDialog();
                </script>
            </onentry>
            <transition port="input" event="save_dialog_closed" cond='save_path != ""' target="../saving">
                <parameter type="string" name="save_path"/>
                <script>
                    this.file_path = save_path;
                    this.sccd_script.xml_file = this.file_path;
                    EditorUtility.SetDirty(this.sccd_script);
                </script>
            </transition>
            <transition  port="input" event="save_dialog_closed" cond='save_path == ""' target="../listening">
                <parameter type="string" name="save_path"/>
            </transition>
        </state>
        <state id="saving">
            <transition target="../listening">
                <script>
                    this.xml_document.Save(this.file_path);
                    Debug.Log("File saved.");
                </script>
            </transition>
        </state>

    </scxml>
</class>
