<?xml version="1.0" encoding="UTF-8" ?>
<class name="StateDrop">
    <relationships>
        <association class="State" name="dropped_state" max="1"/>
        <association class="IRuntimeClass" name="children"/>
    </relationships>
    <attribute type="List&lt;SGUICanvasElement&gt;" name="connection_options"/>
    <attribute type="string[]" name="connection_options_strings"/>
    <attribute type="int" name="selected_option" init-value="0"/>
    <attribute type="SGUICanvasElement" name="canvas_member" />
    
    <attribute type="SGUIModalWindow" name="modal_window" />
    <attribute type="SGUISelectionGrid" name="selection_grid" />
    <attribute type="SGUIButton" name="yes_button" />
    <attribute type="SGUIButton" name="no_button" />
    
    <constructor>
        <parameter type="SGUICanvasElement" name="canvas_member"/>
        <body>
        <![CDATA[
            this.canvas_member = canvas_member;
            this.connection_options = new List<SGUICanvasElement>();
            List<SGUICanvasElement> overlappings = canvas_member.getOverlappings();
            if (overlappings.Count == 0)
            {
            	if (this.canvas_member.parent != this.canvas_member.canvas)
            		this.connection_options.Add(null);
            }
            else
            {
            	for (int i = overlappings.Count - 1; i >= 0; i--)
            	{
                    if (overlappings[i] == this.canvas_member.parent)
                        break;
            		this.connection_options.Add(overlappings[i]);
            		if (overlappings[i].completelyContains(this.canvas_member))
            			break;
            	}
            }
        ]]>
        </body>
    </constructor>
    <method access="public" type="void" name="drawModalWindow">
        <body>
        <![CDATA[
            this.modal_window = new SGUIModalWindow("State Drop");
            this.modal_window.addChild(new SGUISpace());
            this.modal_window.addChild(new SGUILabel("Connect to:"));
            this.selection_grid = new SGUISelectionGrid(this.connection_options_strings);
            this.modal_window.addChild(this.selection_grid);
            this.modal_window.addChild(new SGUISpace());
            
            //Buttons
            SGUIHorizontalGroup buttons_widget = new SGUIHorizontalGroup();
            this.modal_window.addChild(buttons_widget);
            
            this.yes_button = new SGUIButton("Yes");
            buttons_widget.addChild(this.yes_button);
            
            this.no_button = new SGUIButton("No");
            buttons_widget.addChild(this.no_button);

        ]]>
        </body>
    </method>
    <scxml initial="root">
        <state id="root">
            <transition target="../final" cond="this.connection_options.Count == 0">
                <raise target='"dropped_state"' event="not_change_connection"/>
            </transition>
            <transition target="../final" cond="this.connection_options.Count == 1 &amp;&amp; this.connection_options[0] != null">
                <raise target='"dropped_state"' event="change_connection">
                    <parameter expr="this.connection_options[0]"/>
                </raise>
            </transition>
            <transition cond="this.connection_options.Count &gt; 1 || (this.connection_options.Count == 1 &amp;&amp; this.connection_options[0] == null)" target="../popup_active"/>
        </state>

        <state id="popup_active" initial="listening">
            <onentry>
                <script>
                <![CDATA[
                    this.connection_options_strings = new string[this.connection_options.Count];
                    for (int i = 0; i < this.connection_options.Count; i++)
                    {
                        if (this.connection_options[i] != null)
                            this.connection_options_strings[i] = this.connection_options[i].label;
                        else
                            this.connection_options_strings[i] = "Canvas(disconnecting)";
                    }
                    this.drawModalWindow();
                ]]>
                </script>
            </onentry>
            <onexit>
                <script>
                    this.modal_window.close();
                </script>
            </onexit>
            
            <state id="listening">
                <transition event="button_pressed" port="input" cond='this.yes_button.tag == tag' target="../../final">
                    <parameter name="tag" type="int"/>
                    <raise target='"dropped_state"' event="change_connection">
                        <parameter expr="this.connection_options[this.selected_option]"/>
                    </raise>
                </transition>
                <transition event="button_pressed" port="input" cond='this.no_button.tag == tag' target="../../final">
                    <parameter name="tag" type="int"/>
                    <raise target='"dropped_state"' event="not_change_connection"/>
                </transition>
            </state>
        </state>
        <state id="final"/>
    </scxml>
</class>

